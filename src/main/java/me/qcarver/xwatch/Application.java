package me.qcarver.xwatch;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.Transferable;import java.awt.datatransfer.UnsupportedFlavorException;import java.awt.dnd.DnDConstants;import java.awt.dnd.DropTarget;import java.awt.dnd.DropTargetDragEvent;import java.awt.dnd.DropTargetDropEvent;import java.awt.dnd.DropTargetEvent;import java.awt.dnd.DropTargetListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.io.BufferedReader;import me.qcarver.xwatch.visualization.Visualization;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.List;import java.util.Scanner;import java.util.logging.Level;import java.util.logging.Logger;import java.util.regex.Pattern;import javax.swing.*;import me.qcarver.xwatch.configuration.ArgsParser;import me.qcarver.xwatch.configuration.Configuration;/** * A simple demo application launching a Processing Applet * * Demonstrates the combination of JFrame, JButton, JFileChooser and PApplet. * * @author georg munkel * */public class Application extends JFrame implements DropTargetListener{    File tempDir = null;        Visualization applet = null;        private         Object lock = new Object();         DropTarget dt = new DropTarget(            this,            DnDConstants.ACTION_COPY_OR_MOVE,            this,            true);    public static void main(String[] args) {        //get Configuration.get().uration        new ArgsParser(args);        new Application();    }    /**     *     * @param Configuration.get().     */    public Application() {        init();    }    private void init() {        //make sure to shut down the application, when the frame is closed        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        //create an instance of your processing applet        applet = new Visualization();        setTitle("xwatch");        setResizable(true);        setLocation(100,100);        applet.resize(Configuration.get().getPanelWidth(), Configuration.get().getPanelHeight());        applet.setPreferredSize(new Dimension(Configuration.get().getPanelWidth(), Configuration.get().getPanelHeight()));        applet.setMinimumSize(new Dimension(Configuration.get().getPanelWidth(), Configuration.get().getPanelHeight()));                add(applet,BorderLayout.CENTER);        applet.init();        pack();        setVisible(true);        receiveStream();        System.err.println("finished init");           Thread t = new Thread() {        public void run() {            synchronized(lock) {                while (isVisible())                    try {                        lock.wait();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                System.out.println("Window closing");            }        }    };    t.start();    addWindowListener(new WindowAdapter() {        @Override        public void windowClosing(WindowEvent arg0) {            synchronized (lock) {                setVisible(false);                lock.notify();            }        }    });        try {            t.join();        } catch (InterruptedException ex) {            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);        }            }            private void receiveStream()    {        if ((Configuration.get().getXmlDir() != null)                && ((new File(Configuration.get().getXmlDir())).exists())) {            applet.loadXmlDir(new File(Configuration.get().getXmlDir()));        }        //look to see if someone is piping us input        try {            if ( System.in.available() != 0) {                System.out.println("getting data from stream");                createTempDirectory();                applet.loadXmlDir(tempDir);                Pattern xmlPattern = Pattern.compile(                        //"<(?:(\\w*?)(?:\\sxmlns=\"[\\s\\S]*?\".+?)?>[\\s\\S]*?<\\/\\1>)+?");                        //"<(?:(\\S*?)(?:\\sxmlns=\\\"\\S+\")?>[\\s\\S]*?<\\/\\1>)+");                        //<(\w*?)[\s\S]*?<\/\1>                        Configuration.get().getRegEx());                        //"<(\\w*?)[\\s\\S]*?<\\/\\1>");                String match = "";                InputStreamReader isr = new InputStreamReader(System.in);                Scanner scanner = new Scanner(isr);                File file;                for (;;) {                    match = scanner.findWithinHorizon(xmlPattern, 0);                    if (match != null) {                        file = File.createTempFile(                                "temp",                                //TODO: make sax parser to get first element name                                Long.toString(System.nanoTime()) + ".xml",                                tempDir);                        BufferedWriter bwr = new BufferedWriter(new FileWriter(file));                        bwr.write(match);                        bwr.flush();                        bwr.close();                        System.out.println("Wrote new element to file");                    }                    else System.out.println("Scanner match == null");                    System.out.print(".");                }            }        } catch (IOException ex) {            //Logger.getLogger("can't parse from stream");            System.out.println("can't parse from stream" + ex);        } catch (Exception e){            System.out.println("some exception thrown "+ e);        }        System.out.println("leaving receiveStream");    }    public File createTempDirectory() throws IOException {        tempDir = File.createTempFile("temp", Long.toString(System.nanoTime()));        System.out.println("Created temp dir in " + tempDir.getAbsolutePath());        tempDir.delete();        tempDir.mkdir();        if (!tempDir.isDirectory()) {            throw new IOException("Could not create temp directory: " + tempDir.getAbsolutePath());        }        return (tempDir);    }        //Drag and Drop stuff     @Override    public void dragEnter(DropTargetDragEvent dtde) {        //to do show a hint to user.. maybe start getting the name and parsing?    }    @Override    public void dragOver(DropTargetDragEvent dtde) {    }    @Override    public void dropActionChanged(DropTargetDragEvent dtde) {    }    @Override    public void dragExit(DropTargetEvent dte) {    }    @Override    public void drop(DropTargetDropEvent dtde) {        String dirName = getFileNameDraggedEvent(dtde);        File dir = new File(dirName);        if (dir != null){            if (dir.isDirectory()){                applet.loadXmlDir(dir);            }        }    }    /**     * Thanks to "Rocket Hazmat" on Stack Overflow for this gem. Behavior in     * Windows different than Mac/Linux, so DnD impl is not straight fwd!     *     * @param dtde     * @return fileName or empty if not a file/didn't-work     */    private String getFileNameDraggedEvent(DropTargetDropEvent dtde) {        String filename = "";        try {            // Get the object to be transferred            Transferable tr = dtde.getTransferable();            DataFlavor[] flavors = tr.getTransferDataFlavors();            // If flavors is empty get flavor list from DropTarget            flavors = (flavors.length == 0) ? dtde.getCurrentDataFlavors() : flavors;            // Select best data flavor            DataFlavor flavor = DataFlavor.selectBestTextFlavor(flavors);            // Flavor will be null on Windows            // In which case use the 1st available flavor            flavor = (flavor == null) ? flavors[0] : flavor;            // Flavors to check            DataFlavor Linux = new DataFlavor("text/uri-list;class=java.io.Reader");            DataFlavor Windows = DataFlavor.javaFileListFlavor;            // On Linux (and OS X) file DnD is a reader            if (flavor.equals(Linux)) {                dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);                BufferedReader read = new BufferedReader(flavor.getReaderForText(tr));                // Remove 'file://' from file name                filename = read.readLine().substring(7).replace("%20", " ");                // Remove 'localhost' from OS X file names                if (filename.substring(0, 9).equals("localhost")) {                    filename = filename.substring(9);                }                read.close();                dtde.dropComplete(true);                System.out.println("File Dragged:" + filename);                //mainWindow.openFile(fileName);            } // On Windows file DnD is a file list            else if (flavor.equals(Windows)) {                dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);                @SuppressWarnings("unchecked")                List<File> list = (List<File>) tr.getTransferData(flavor);                dtde.dropComplete(true);                if (list.size() == 1) {                    System.out.println("File Dragged: " + list.get(0));                    filename = list.get(0).getAbsolutePath(); //<-Mac was here!?                }            } else {                System.err.println("DnD Error");                dtde.rejectDrop();            }            return filename;        } //TODO: OS X Throws ArrayIndexOutOfBoundsException on first DnD        catch (ArrayIndexOutOfBoundsException e) {            System.err.println("DnD not initalized properly, please try again.");        } catch (IOException e) {            System.err.println(e.getMessage());        } catch (UnsupportedFlavorException e) {            System.err.println(e.getMessage());        } catch (ClassNotFoundException e) {            System.err.println(e.getMessage());        }        return filename;    }} //       buttonLoad.addActionListener(new ActionListener() {//            public void actionPerformed(ActionEvent arg0) {//                JFileChooser chooser = new JFileChooser();////                //looking for directories w xml in them//                chooser.setCurrentDirectory(new java.io.File("."));//                chooser.setDialogTitle("Choose an Xml Documents Directory");//                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);//                chooser.setAcceptAllFileFilterUsed(false);////                int returnVal = chooser.showOpenDialog(frame);//                if (returnVal == JFileChooser.APPROVE_OPTION) {//                    System.out.println("You chose to open this directory: "//                            + chooser.getSelectedFile().getName());////                    applet.loadXmlDir(chooser.getSelectedFile());////                }//            }////        });